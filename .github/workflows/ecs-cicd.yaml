name: ECS CI/CD

on:
  push:
    branches:
      - dev
      - stage
    tags: 
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev
      - stage

env:
  SONAR_PROJECT_KEY: 3-Tier-web-architecture
  SONAR_ORG: ecs-ci-cd
  AWS_REGION: us-east-1
  ECS_TASK_DEFINITION: task-web-app
  ECS_CLUSTER: Full-stack-web-app
  ECS_SERVICE: web-app-service

jobs:
  sonarcloud:
    name: Code Analysis with SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  docker-build:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: startsWith(github.event.ref, 'refs/heads/dev') || startsWith(github.event.ref, 'refs/heads/stage')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t frontend:${GITHUB_SHA::3} -f frontend/Dockerfile frontend/

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/
 
      - name: Run Trivy Scan
        run: |
          trivy image --severity HIGH,CRITICAL frontend:${GITHUB_SHA::3} || exit 1
         
      - name: Push Image to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Push Docker Image to ECR
        run: |
          docker tag frontend:${GITHUB_SHA::3} ${{ secrets.ECR_REPO }}:${GITHUB_SHA::3}
          docker push ${{ secrets.ECR_REPO }}:${GITHUB_SHA::3}

  deploy-dev-stage:
    name: Deploy to Dev/Stage
    runs-on: ubuntu-latest
    needs: [sonarcloud, docker-build]
    if: startsWith(github.event.ref, 'refs/heads/dev') || startsWith(github.event.ref, 'refs/heads/stage')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            > task-definition.json

          CONTAINER_DEFINITIONS=$(jq '.taskDefinition.containerDefinitions' task-definition.json)

          UPDATED_CONTAINER_DEFINITIONS=$(echo "$CONTAINER_DEFINITIONS" | \
            jq --arg IMAGE "${{ secrets.ECR_REPO }}:${GITHUB_SHA::3}" \
            'map(if .name == "frontend" then .image = $IMAGE else . end)')

          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_DEFINITION }} \
            --container-definitions "$UPDATED_CONTAINER_DEFINITIONS" \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 1024 \
            --memory 3072 \
            --execution-role-arn arn:aws:iam::429841094792:role/todo-app-role)

          NEW_REVISION=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.revision')

          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }}:$NEW_REVISION

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
 
      - name: Build Docker Image for Production
        run: |
          docker build -t frontend:${{ github.ref_name }} -f frontend/Dockerfile frontend/
 
      - name: Push Docker Image to ECR for Prod
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: ${{ secrets.ECR_REPO }}:${{ github.ref_name }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker tag frontend:$IMAGE_TAG ${{ secrets.ECR_REPO }}:${{ github.ref_name }}
          docker push ${{ secrets.ECR_REPO }}:${{ github.ref_name }}
 
      - name: Update ECS Task Definition for Prod
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            > task-definition.json
 
          CONTAINER_DEFINITIONS=$(jq '.taskDefinition.containerDefinitions' task-definition.json)
 
          UPDATED_CONTAINER_DEFINITIONS=$(echo "$CONTAINER_DEFINITIONS" | \
            jq --arg IMAGE "${{ secrets.ECR_REPO }}:${{ github.ref_name }}" \
            'map(if .name == "frontend" then .image = $IMAGE else . end)')
 
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_DEFINITION }} \
            --container-definitions "$UPDATED_CONTAINER_DEFINITIONS" \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 1024 \
            --memory 3072 \
            --execution-role-arn arn:aws:iam::429841094792:role/todo-app-role)
 
          NEW_REVISION=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.revision')
 
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }}:$NEW_REVISION \
            --desired-count 1